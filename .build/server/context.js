"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = __importStar(require("mongoose"));
const jwt = __importStar(require("jsonwebtoken"));
const Schema = mongoose.Schema;
const userSchema = new Schema({
    email: String,
    password: String
});
const User = mongoose.model("User", userSchema);
// type Ingredient {
//     id: ID!
//     name: String!
//     createdAt: Int!
//     createdBy: User!
// }
const ingredientSchema = new Schema({
    name: { type: String, required: true },
    shortID: String,
    created: {
        on: { type: Number, default: Date.now() },
        by: { type: userSchema, required: true }
    }
});
const Ingredient = mongoose.model("Ingredient", ingredientSchema);
// type Recipe {
//   id: ID!
//   name: String!
//   createdAt: Int!
//   createdBy: User!
//   ingredients: [Ingredient!]
//   inItem: [MenuItem!]
// }
const recipeSchema = new Schema({
    name: String,
    shortID: String,
    created: {
        on: { type: Number, default: Date.now() },
        by: { type: userSchema, required: true }
    },
    ingredients: [ingredientSchema]
});
const Recipe = mongoose.model("Recipe", recipeSchema);
// type MenuItem {
//   id: ID!
//   name: String!
//   createdAt: Int!
//   createdBy: User!
//   recipes: [Recipe!]
//   inSection: [MenuSection!]
// }
const menuItemSchema = new Schema({
    name: String,
    shortID: String,
    created: {
        on: { type: Number, default: Date.now() },
        by: { type: userSchema, required: true }
    },
    recipes: [recipeSchema]
});
const MenuItem = mongoose.model("MenuItem", menuItemSchema);
// type MenuSection {
//   id: ID!
//   name: String!
//   createdAt: Int!
//   createdBy: User!
//   items: [MenuItem!]
//   inMenu: [Menu!]
// }
const menuSectionSchema = new Schema({
    name: String,
    items: [menuItemSchema]
});
// type Menu {
//   id: ID!
//   name: String!
//   createdAt: Int!
//   createdBy: User!
//   sections: [MenuSection!]
// }
const menuSchema = new Schema({
    name: String,
    shortID: String,
    created: {
        on: { type: Number, default: Date.now() },
        by: { type: userSchema, required: true }
    },
    sections: [menuSectionSchema]
});
const Menu = mongoose.model("Menu", menuSchema);
const models = {
    User,
    Ingredient,
    Recipe,
    MenuItem,
    Menu
};
exports.default = async (req) => {
    let USER;
    if (req.headers.authorization) {
        const token = (Array.isArray(req.headers.authorization)
            ? req.headers.authorization[0]
            : req.headers.authorization).split(" ")[1];
        const { id } = await jwt.verify(token, process.env.JWT_SECRET);
        USER = await User.find({ id });
    }
    return Object.assign({}, models, { USER, REQ: req });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLG1EQUFxQztBQUNyQyxrREFBb0M7QUFFcEMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztBQVEvQixNQUFNLFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQztJQUM1QixLQUFLLEVBQUUsTUFBTTtJQUNiLFFBQVEsRUFBRSxNQUFNO0NBQ2pCLENBQUMsQ0FBQztBQUNILE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBRWhELG9CQUFvQjtBQUNwQixjQUFjO0FBQ2Qsb0JBQW9CO0FBQ3BCLHNCQUFzQjtBQUN0Qix1QkFBdUI7QUFDdkIsSUFBSTtBQUVKLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxNQUFNLENBQUM7SUFDbEMsSUFBSSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ3RDLE9BQU8sRUFBRSxNQUFPO0lBQ2hCLE9BQU8sRUFBRTtRQUNQLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUN6QyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7S0FDekM7Q0FDRixDQUFDLENBQUM7QUFDSCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBRWxFLGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQixxQkFBcUI7QUFDckIsK0JBQStCO0FBQy9CLHdCQUF3QjtBQUN4QixJQUFJO0FBQ0osTUFBTSxZQUFZLEdBQUcsSUFBSSxN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aEIsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMvRCxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNoQztJQUVELE9BQU8sa0JBQUssTUFBTSxJQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsR0FBRyxHQUFhLENBQUM7QUFDbEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaHR0cHMgZnJvbSBcImh0dHBzXCI7XG5pbXBvcnQgKiBhcyBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCAqIGFzIGp3dCBmcm9tIFwianNvbndlYnRva2VuXCI7XG5cbmNvbnN0IFNjaGVtYSA9IG1vbmdvb3NlLlNjaGVtYTtcblxuaW50ZXJmYWNlIFVTRVIge1xuICBpZDogYW55O1xuICBlbWFpbDogc3RyaW5nO1xuICBwYXNzd29yZDogc3RyaW5nO1xufVxuXG5jb25zdCB1c2VyU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gIGVtYWlsOiBTdHJpbmcsXG4gIHBhc3N3b3JkOiBTdHJpbmdcbn0pO1xuY29uc3QgVXNlciA9IG1vbmdvb3NlLm1vZGVsKFwiVXNlclwiLCB1c2VyU2NoZW1hKTtcblxuLy8gdHlwZSBJbmdyZWRpZW50IHtcbi8vICAgICBpZDogSUQhXG4vLyAgICAgbmFtZTogU3RyaW5nIVxuLy8gICAgIGNyZWF0ZWRBdDogSW50IVxuLy8gICAgIGNyZWF0ZWRCeTogVXNlciFcbi8vIH1cblxuY29uc3QgaW5ncmVkaWVudFNjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICBuYW1lOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgc2hvcnRJRDogU3RyaW5nISxcbiAgY3JlYXRlZDoge1xuICAgIG9uOiB7IHR5cGU6IE51bWJlciwgZGVmYXVsdDogRGF0ZS5ub3coKSB9LFxuICAgIGJ5OiB7IHR5cGU6IHVzZXJTY2hlbWEsIHJlcXVpcmVkOiB0cnVlIH1cbiAgfVxufSk7XG5jb25zdCBJbmdyZWRpZW50ID0gbW9uZ29vc2UubW9kZWwoXCJJbmdyZWRpZW50XCIsIGluZ3JlZGllbnRTY2hlbWEpO1xuXG4vLyB0eXBlIFJlY2lwZSB7XG4vLyAgIGlkOiBJRCFcbi8vICAgbmFtZTogU3RyaW5nIVxuLy8gICBjcmVhdGVkQXQ6IEludCFcbi8vICAgY3JlYXRlZEJ5OiBVc2VyIVxuLy8gICBpbmdyZWRpZW50czogW0luZ3JlZGllbnQhXVxuLy8gICBpbkl0ZW06IFtNZW51SXRlbSFdXG4vLyB9XG5jb25zdCByZWNpcGVTY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgbmFtZTogU3RyaW5nISxcbiAgc2hvcnRJRDogU3RyaW5nLFxuICBjcmVhdGVkOiB7XG4gICAgb246IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiBEYXRlLm5vdygpIH0sXG4gICAgYnk6IHsgdHlwZTogdXNlclNjaGVtYSwgcmVxdWlyZWQ6IHRydWUgfVxuICB9LFxuICBpbmdyZWRpZW50czogW2luZ3JlZGllbnRTY2hlbWEhXSFcbn0pO1xuY29uc3QgUmVjaXBlID0gbW9uZ29vc2UubW9kZWwoXCJSZWNpcGVcIiwgcmVjaXBlU2NoZW1hKTtcblxuLy8gdHlwZSBNZW51SXRlbSB7XG4vLyAgIGlkOiBJRCFcbi8vICAgbmFtZTogU3RyaW5nIVxuLy8gICBjcmVhdGVkQXQ6IEludCFcbi8vICAgY3JlYXRlZEJ5OiBVc2VyIVxuLy8gICByZWNpcGVzOiBbUmVjaXBlIV1cbi8vICAgaW5TZWN0aW9uOiBbTWVudVNlY3Rpb24hXVxuLy8gfVxuY29uc3QgbWVudUl0ZW1TY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgbmFtZTogU3RyaW5nISxcbiAgc2hvcnRJRDogU3RyaW5nLFxuICBjcmVhdGVkOiB7XG4gICAgb246IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiBEYXRlLm5vdygpIH0sXG4gICAgYnk6IHsgdHlwZTogdXNlclNjaGVtYSwgcmVxdWlyZWQ6IHRydWUgfVxuICB9LFxuICByZWNpcGVzOiBbcmVjaXBlU2NoZW1hIV0hXG59KTtcbmNvbnN0IE1lbnVJdGVtID0gbW9uZ29vc2UubW9kZWwoXCJNZW51SXRlbVwiLCBtZW51SXRlbVNjaGVtYSk7XG5cbi8vIHR5cGUgTWVudVNlY3Rpb24ge1xuLy8gICBpZDogSUQhXG4vLyAgIG5hbWU6IFN0cmluZyFcbi8vICAgY3JlYXRlZEF0OiBJbnQhXG4vLyAgIGNyZWF0ZWRCeTogVXNlciFcbi8vICAgaXRlbXM6IFtNZW51SXRlbSFdXG4vLyAgIGluTWVudTogW01lbnUhXVxuLy8gfVxuY29uc3QgbWVudVNlY3Rpb25TY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgbmFtZTogU3RyaW5nISxcbiAgaXRlbXM6IFttZW51SXRlbVNjaGVtYSFdIVxufSk7XG5cbi8vIHR5cGUgTWVudSB7XG4vLyAgIGlkOiBJRCFcbi8vICAgbmFtZTogU3RyaW5nIVxuLy8gICBjcmVhdGVkQXQ6IEludCFcbi8vICAgY3JlYXRlZEJ5OiBVc2VyIVxuLy8gICBzZWN0aW9uczogW01lbnVTZWN0aW9uIV1cbi8vIH1cbmNvbnN0IG1lbnVTY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgbmFtZTogU3RyaW5nISxcbiAgc2hvcnRJRDogU3RyaW5nLFxuICBjcmVhdGVkOiB7XG4gICAgb246IHsgdHlwZTogTnVtYmVyLCBkZWZhdWx0OiBEYXRlLm5vdygpIH0sXG4gICAgYnk6IHsgdHlwZTogdXNlclNjaGVtYSwgcmVxdWlyZWQ6IHRydWUgfVxuICB9LFxuICBzZWN0aW9uczogW21lbnVTZWN0aW9uU2NoZW1hIV0hXG59KTtcbmNvbnN0IE1lbnUgPSBtb25nb29zZS5tb2RlbChcIk1lbnVcIiwgbWVudVNjaGVtYSk7XG5cbmNvbnN0IG1vZGVscyA9IHtcbiAgVXNlcixcbiAgSW5ncmVkaWVudCxcbiAgUmVjaXBlLFxuICBNZW51SXRlbSxcbiAgTWVudVxufTtcblxudHlwZSBDb250ZXh0ID0gdHlwZW9mIG1vZGVscyAmIHsgUkVROiBodHRwcy5JbmNvbWluZ1JlcXVlc3Q7IFVTRVI6IFVTRVIgfTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHJlcTogaHR0cHMuSW5jb21pbmdSZXF1ZXN0KSA9PiB7XG4gIGxldCBVU0VSO1xuXG4gIGlmIChyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uKSB7XG4gICAgY29uc3QgdG9rZW4gPSAoQXJyYXkuaXNBcnJheShyZXEuaGVhZGVycy5hdXRob3JpemF0aW9uKVxuICAgICAgPyByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uWzBdXG4gICAgICA6IHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb25cbiAgICApLnNwbGl0KFwiIFwiKVsxXTtcblxuICAgIGNvbnN0IHsgaWQgfSA9IGF3YWl0IGp3dC52ZXJpZnkodG9rZW4sIHByb2Nlc3MuZW52LkpXVF9TRUNSRVQpO1xuICAgIFVTRVIgPSBhd2FpdCBVc2VyLmZpbmQoeyBpZCB9KTtcbiAgfVxuXG4gIHJldHVybiB7IC4uLm1vZGVscywgVVNFUiwgUkVROiByZXEgfSBhcyBDb250ZXh0O1xufTtcbiJdfQ==